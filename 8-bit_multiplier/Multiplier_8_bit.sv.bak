module Multiplier_8_bit(
	input logic [7:0] S,
	input logic CLK, Reset_h, ClearA_LoadB_h, Execute_h,
	output logic [6:0] HEX0, HEX1, HEX2, HEX3,
	output logic [7:0] Aval, Bval,
	output logic X
);

	logic [7:0] A, B;
	logic [8:0] Sum;
	logic Shift_En, Register_X_Shift_Out, Register_A_Shift_Out, Register_B_Shift_Out, Clear_Load, Add_Subtract, Subtract_Enable, Clear_Register, Reset, Execute, ClearA_LoadB;
	
	sync s0(.Clk(CLK), .d(Reset_h),      .q(Reset));
	sync s1(.Clk(CLK), .d(~Execute_h),    .q(Execute));
	sync s2(.Clk(CLK), .d(~ClearA_LoadB_h), .q(ClearA_LoadB));
	
	register_1_bit Reg_1_bit  (.CLK(CLK), .Reset(Reset|Clear_Load|Clear_Register), .Load(Add_Subtract), .D(Sum[8]), .Q(Register_X_Shift_Out));
	register_8_bit Reg_A_8_bit(.CLK(CLK), .Reset(Reset|Clear_Load|Clear_Register), .Load(Add_Subtract), .Shift_En(Shift_En), .Shift_In(Register_X_Shift_Out), .Data_In(Sum[7:0]), .Shift_Out(Register_A_Shift_Out), .Data_Out(A));
	register_8_bit Reg_B_8_bit(.CLK(CLK), .Reset(Reset),   								 .Load(ClearA_LoadB), .Shift_En(Shift_En), .Shift_In(Register_A_Shift_Out), .Data_In(S), 		   .Shift_Out(Register_B_Shift_Out), .Data_Out(B));
	adder_subtractor_9_bit Add_Sub_9_bit(.A(A), .B(S), .Subtract_Enable(Subtract_Enable), .Sum(Sum), .Cout());
	control_unit Control_Unit(.CLK(CLK), .Reset(Reset), .ClearA_LoadB(ClearA_LoadB), .Execute(Execute), .Register_B_Shift_Out(Register_B_Shift_Out), .Clear_Load(Clear_Load), .Shift(Shift_En), .Add_Subtract(Add_Subtract), .Subtract_Enable(Subtract_Enable), .Clear_Register(Clear_Register));
	HexDriver HexBL(.In0(B[3:0]), .Out0(HEX0));
	HexDriver HexBU(.In0(B[7:4]), .Out0(HEX1));
	HexDriver HexAL(.In0(A[3:0]), .Out0(HEX2));
	HexDriver HexAU(.In0(A[7:4]), .Out0(HEX3));
	
	assign Aval = A;
	assign Bval = B;

endmodule